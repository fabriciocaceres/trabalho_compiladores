/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. cbola.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}
PARSER_BEGIN(EG2)
public class EG2/*@bgen(jjtree)*/implements EG2TreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTEG2State jjtree = new JJTEG2State();

/*@egen*/
  public static void main(String args [])
  {
    System.out.print("Entre com o codigo :");
    new EG2(System.in);
    try
    {
      SimpleNode n = EG2.Start();
      n.dump("");
      System.out.println("Fim programa.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(EG2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* PALAVRAS RESERVADAS*/
{
  < PARA : "para" >
| < SE : "se" >
| < SENAO : "!se" >
| < RETORNO : "retorno" >
| < INI : "ini" >
| < FUNCAO : "funcao" >
| < MOSTRAR : "mostrar" >
}

TOKEN : /* LIMITADORES */
{
  < ABRE_PARENTESES : "(" >
| < FECHA_PARENTESES : ")" >
| < ABRE_CHAVE : "{" >
| < FECHA_CHAVE : "}" >
| < VIRGULA : "," >
| < PONTO_VIRGULA : ";" >
| < DELIMITAR_TEXTO : "'" >
}

TOKEN : /* TIPOS DE ID */
{
  < TIPO_INTEIRO : "inteiro" >
| < TIPO_REAL : "real" >
| < TIPO_TEXTO : "texto" >
}

TOKEN : /* TIPOS OPERADORES */
{
  < MAIOR : ">" >
| < MENOR : "<" >
| < MENOR_IGUAL : "<=" >
| < MAIOR_IGUAL : ">=" >
| < IGUAL : "==" >
| < DIFERENTE : "!=" >
| < ATRIBUIR : "=" >
}

TOKEN : /* TIPOS OPERADORES MATEMATICOS*/
{
  < MAIS : "+" >
| < MENOS : "-" >
| < MULT : "*" >
| < DIVI : "/" >
}

TOKEN : /* LETRAS E NUMEROS*/
{
  < LETRA_MAIUSCULA : [ "A"-"Z" ] >
| < LETRA_MINUSCULA : [ "a"-"z" ] >
| < NUMERO :
    < DIGITO >
  | < DIGITO > "." < DIGITO >>
| < #DIGITO : ([ "0"-"9" ])+ >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  main()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

int main() :
{/*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) main */
  try {
/*@egen*/
  (
    criaFuncao()
  )*
  ini()pontoVirgula()
   (
    criaFuncao()
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return 0;
  }
| ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return 1;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ini() :
{/*@bgen(jjtree) ini */
  SimpleNode jjtn000 = new SimpleNode(JJTINI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ini */
  try {
/*@egen*/
  < INI > abreParenteses() fechaParenteses() abreChave()
  (
    comando()
  )*
  fechaChave()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* PALAVRAS RESERVADAS*/
void funcao() :
{/*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) funcao */
  try {
/*@egen*/
  < FUNCAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void retorno() :
{/*@bgen(jjtree) retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) retorno */
  try {
/*@egen*/
  < RETORNO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void mostrar() :
{/*@bgen(jjtree) mostrar */
  SimpleNode jjtn000 = new SimpleNode(JJTMOSTRAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mostrar */
  try {
/*@egen*/
  < MOSTRAR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void para() :
{/*@bgen(jjtree) para */
  SimpleNode jjtn000 = new SimpleNode(JJTPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) para */
  try {
/*@egen*/
  < PARA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void se() :
{/*@bgen(jjtree) se */
  SimpleNode jjtn000 = new SimpleNode(JJTSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) se */
  try {
/*@egen*/
  < SE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void seNao() :
{/*@bgen(jjtree) seNao */
  SimpleNode jjtn000 = new SimpleNode(JJTSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) seNao */
  try {
/*@egen*/
  < SENAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* PALAVRAS RESERVADAS*/

/* LIMITADORES */
void abreParenteses() :
{/*@bgen(jjtree) abreParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) abreParenteses */
  try {
/*@egen*/
  < ABRE_PARENTESES >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fechaParenteses() :
{/*@bgen(jjtree) fechaParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fechaParenteses */
  try {
/*@egen*/
  < FECHA_PARENTESES >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void abreChave() :
{/*@bgen(jjtree) abreChave */
  SimpleNode jjtn000 = new SimpleNode(JJTABRECHAVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) abreChave */
  try {
/*@egen*/
  < ABRE_CHAVE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fechaChave() :
{/*@bgen(jjtree) fechaChave */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHACHAVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fechaChave */
  try {
/*@egen*/
  < FECHA_CHAVE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void virgula() :
{/*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) virgula */
  try {
/*@egen*/
  < VIRGULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pontoVirgula() :
{/*@bgen(jjtree) pontoVirgula */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTOVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pontoVirgula */
  try {
/*@egen*/
  < PONTO_VIRGULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void delimitaTexto() :
{/*@bgen(jjtree) delimitaTexto */
  SimpleNode jjtn000 = new SimpleNode(JJTDELIMITATEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) delimitaTexto */
  try {
/*@egen*/
  < DELIMITAR_TEXTO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* LIMITADORES */

/* TIPOS DE ID */
void tipoID() :
{/*@bgen(jjtree) tipoID */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoID */
  try {
/*@egen*/
  tipoInteiro()
| tipoReal()
| tipoTexto()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoInteiro() :
{/*@bgen(jjtree) tipoInteiro */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoInteiro */
  try {
/*@egen*/
  < TIPO_INTEIRO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoReal() :
{/*@bgen(jjtree) tipoReal */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoReal */
  try {
/*@egen*/
  < TIPO_REAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoTexto() :
{/*@bgen(jjtree) tipoTexto */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoTexto */
  try {
/*@egen*/
  < TIPO_TEXTO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* FIM TIPOS DE ID */

/* TIPOS OPERADORES */
void operadorLogico() :
{/*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operadorLogico */
  try {
/*@egen*/
  menor()
| maior()
| menorIgual()
| maiorIgual()
| diferente()
| igual()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void menor() :
{/*@bgen(jjtree) menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) menor */
  try {
/*@egen*/
  < MENOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void maior() :
{/*@bgen(jjtree) maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) maior */
  try {
/*@egen*/
  < MAIOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void menorIgual() :
{/*@bgen(jjtree) menorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) menorIgual */
  try {
/*@egen*/
  < MENOR_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void maiorIgual() :
{/*@bgen(jjtree) maiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) maiorIgual */
  try {
/*@egen*/
  < MAIOR_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void diferente() :
{/*@bgen(jjtree) diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) diferente */
  try {
/*@egen*/
  < DIFERENTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void igual() :
{/*@bgen(jjtree) igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) igual */
  try {
/*@egen*/
  < IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void atribuir() :
{/*@bgen(jjtree) atribuir */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) atribuir */
  try {
/*@egen*/
  < ATRIBUIR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* FIM TIPOS OPERADORES */
/* TIPOS OPERADORES MATEMATICOS*/
void operadorMat() :
{/*@bgen(jjtree) operadorMat */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operadorMat */
  try {
/*@egen*/
  mais()
| menos()
| mult()
| divi()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void increDecrementa() :
{/*@bgen(jjtree) increDecrementa */
  SimpleNode jjtn000 = new SimpleNode(JJTINCREDECREMENTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) increDecrementa */
  try {
/*@egen*/
  mais()
| menos()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void mais() :
{/*@bgen(jjtree) mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mais */
  try {
/*@egen*/
  < MAIS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void menos() :
{/*@bgen(jjtree) menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) menos */
  try {
/*@egen*/
  < MENOS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void mult() :
{/*@bgen(jjtree) mult */
  SimpleNode jjtn000 = new SimpleNode(JJTMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mult */
  try {
/*@egen*/
  < MULT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void divi() :
{/*@bgen(jjtree) divi */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) divi */
  try {
/*@egen*/
  < DIVI >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* FIM TIPOS OPERADORES MATEMATICOS*/
/* LETRAS E NUMEROS*/
void numero() :
{/*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) numero */
  try {
/*@egen*/
  < NUMERO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void letra() :
{/*@bgen(jjtree) letra */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) letra */
  try {
/*@egen*/
  (
    letraMinuscula()
  | letraMaiuscula()
  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void letraMinuscula() :
{/*@bgen(jjtree) letraMinuscula */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRAMINUSCULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) letraMinuscula */
  try {
/*@egen*/
  < LETRA_MINUSCULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void letraMaiuscula() :
{/*@bgen(jjtree) letraMaiuscula */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRAMAIUSCULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) letraMaiuscula */
  try {
/*@egen*/
  < LETRA_MAIUSCULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void texto() :
{/*@bgen(jjtree) texto */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) texto */
  try {
/*@egen*/
  delimitaTexto()
  (
    letra()
  | numero()
  )+
  delimitaTexto()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* LETRAS E NUMEROS*/
/* ID */
void id() :
{/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) id */
  try {
/*@egen*/
  letraMinuscula()
  (
    letra()
  | numero()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* COMANDOS*/
void chamaFuncao() :
{/*@bgen(jjtree) chamaFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAMAFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) chamaFuncao */
  try {
/*@egen*/
  funcao() id() abreParenteses()
  (
   	id()
  | texto()
  | numero()
  )*
  fechaParenteses() pontoVirgula()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracaoID() :
{/*@bgen(jjtree) declaracaoID */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaracaoID */
    try {
/*@egen*/
    tipoID() listaID()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void listaID():
{/*@bgen(jjtree) listaID */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTAID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) listaID */
  try {
/*@egen*/
  (
     id()
  (
    atribuir()
    (
      id()
    | texto()
    | numero()
    )
  )? (virgula())?)*
  pontoVirgula()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void repeticao() :
{/*@bgen(jjtree) repeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repeticao */
  try {
/*@egen*/
  para() abreParenteses()
  (
    increDecrementa() virgula()
  )?
  numero() virgula() id() virgula() numero()
  (
    virgula() increDecrementa()
  )?
  fechaParenteses() abreChave()
  (
    comando()
  )*
  fechaChave()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void condicionalSe() :
{/*@bgen(jjtree) condicionalSe */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condicionalSe */
  try {
/*@egen*/
  se() abreParenteses() expressao() fechaParenteses() abreChave()
  (
    comando()
  )*
  fechaChave()
  (
    condicionalSeNao()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void condicionalSeNao() :
{/*@bgen(jjtree) condicionalSeNao */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONALSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condicionalSeNao */
  try {
/*@egen*/
  seNao() abreChave()
  (
    comando()
  )*
  fechaChave()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expressao() :
{/*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expressao */
  try {
/*@egen*/
  (
    id()
  | numero()
  | texto()
  )
  operadorLogico()
  (
    id()
  | numero()
  | texto()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void imprimir() :
{/*@bgen(jjtree) imprimir */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) imprimir */
  try {
/*@egen*/
  mostrar() abreParenteses()
  (
    texto()
  | id()
  )
  fechaParenteses() pontoVirgula()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void retornoFuncao() :
{/*@bgen(jjtree) retornoFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNOFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) retornoFuncao */
  try {
/*@egen*/
  retorno() abreParenteses()
  (
    id()
  | texto()
  | numero()
  )
  fechaParenteses() pontoVirgula()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void iniciaId() :
{/*@bgen(jjtree) iniciaId */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIAID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) iniciaId */
  try {
/*@egen*/
  id() atribuir()
  (
    numero()
  | id()
  | texto()
  )
  pontoVirgula()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void criaFuncao() :
{/*@bgen(jjtree) criaFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTCRIAFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) criaFuncao */
  try {
/*@egen*/
  funcao() id() abreParenteses()
  (
    tipoID() id()
  )*
  fechaParenteses() abreChave()
  (
    comando()
  )*
  (
    ini() abreParenteses() fechaParenteses() abreChave()
    (
      comando()
    )*
    fechaChave()
  )*
  fechaChave()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void comando() :
{/*@bgen(jjtree) comando */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comando */
  try {
/*@egen*/
  repeticao()
| declaracaoID()
| condicionalSe()
| chamaFuncao()
| imprimir()
| retornoFuncao()
| iniciaId()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}