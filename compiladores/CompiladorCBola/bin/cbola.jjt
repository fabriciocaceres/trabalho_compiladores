/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}
PARSER_BEGIN(EG2)
public class EG2
{
  public static void main(String args [])
  {
    System.out.print("Entre com o codigo :");
    new EG2(System.in);
    try
    {
      SimpleNode n = EG2.Start();
      n.dump("");
      System.out.println("Fim programa.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(EG2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* PALAVRAS RESERVADAS*/
{
  < PARA : "para" >
| < SE : "se" >
| < SENAO : "!se" >
| < RETORNO : "retorno" >
| < INI : "ini" >
| < FUNCAO : "funcao" >
| < MOSTRAR : "mostrar" >
}

TOKEN : /* LIMITADORES */
{
  < ABRE_PARENTESES : "(" >
| < FECHA_PARENTESES : ")" >
| < ABRE_CHAVE : "{" >
| < FECHA_CHAVE : "}" >
| < VIRGULA : "," >
| < PONTO_VIRGULA : ";" >
| < DELIMITAR_TEXTO : "'" >
}

TOKEN : /* TIPOS DE ID */
{
  < TIPO_INTEIRO : "inteiro" >
| < TIPO_REAL : "real" >
| < TIPO_TEXTO : "texto" >
}

TOKEN : /* TIPOS OPERADORES */
{
  < MAIOR : ">" >
| < MENOR : "<" >
| < MENOR_IGUAL : "<=" >
| < MAIOR_IGUAL : ">=" >
| < IGUAL : "==" >
| < DIFERENTE : "!=" >
| < ATRIBUIR : "=" >
}

TOKEN : /* TIPOS OPERADORES MATEMATICOS*/
{
  < MAIS : "+" >
| < MENOS : "-" >
| < MULT : "*" >
| < DIVI : "/" >
}

TOKEN : /* LETRAS E NUMEROS*/
{
  < LETRA_MAIUSCULA : [ "A"-"Z" ] >
| < LETRA_MINUSCULA : [ "a"-"z" ] >
| < NUMERO :
    < DIGITO >
  | < DIGITO > "." < DIGITO >>
| < #DIGITO : ([ "0"-"9" ])+ >
}

SimpleNode Start() :
{}
{
  main()
  {
    return jjtThis;
  }
}

int main() :
{}
{
  (
    criaFuncao()
  )*
  ini()pontoVirgula()
   (
    criaFuncao()
  )*
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void ini() :
{}
{
  < INI > abreParenteses() fechaParenteses() abreChave()
  (
    comando()
  )*
  fechaChave()
}

/* PALAVRAS RESERVADAS*/
void funcao() :
{}
{
  < FUNCAO >
}

void retorno() :
{}
{
  < RETORNO >
}

void mostrar() :
{}
{
  < MOSTRAR >
}

void para() :
{}
{
  < PARA >
}

void se() :
{}
{
  < SE >
}

void seNao() :
{}
{
  < SENAO >
}

/* PALAVRAS RESERVADAS*/

/* LIMITADORES */
void abreParenteses() :
{}
{
  < ABRE_PARENTESES >
}

void fechaParenteses() :
{}
{
  < FECHA_PARENTESES >
}

void abreChave() :
{}
{
  < ABRE_CHAVE >
}

void fechaChave() :
{}
{
  < FECHA_CHAVE >
}

void virgula() :
{}
{
  < VIRGULA >
}

void pontoVirgula() :
{}
{
  < PONTO_VIRGULA >
}

void delimitaTexto() :
{}
{
  < DELIMITAR_TEXTO >
}

/* LIMITADORES */

/* TIPOS DE ID */
void tipoID() :
{}
{
  tipoInteiro()
| tipoReal()
| tipoTexto()
}

void tipoInteiro() :
{}
{
  < TIPO_INTEIRO >
}

void tipoReal() :
{}
{
  < TIPO_REAL >
}

void tipoTexto() :
{}
{
  < TIPO_TEXTO >
}

/* FIM TIPOS DE ID */

/* TIPOS OPERADORES */
void operadorLogico() :
{}
{
  menor()
| maior()
| menorIgual()
| maiorIgual()
| diferente()
| igual()
}

void menor() :
{}
{
  < MENOR >
}

void maior() :
{}
{
  < MAIOR >
}

void menorIgual() :
{}
{
  < MENOR_IGUAL >
}

void maiorIgual() :
{}
{
  < MAIOR_IGUAL >
}

void diferente() :
{}
{
  < DIFERENTE >
}

void igual() :
{}
{
  < IGUAL >
}

void atribuir() :
{}
{
  < ATRIBUIR >
}

/* FIM TIPOS OPERADORES */
/* TIPOS OPERADORES MATEMATICOS*/
void operadorMat() :
{}
{
  mais()
| menos()
| mult()
| divi()
}

void increDecrementa() :
{}
{
  mais()
| menos()
}

void mais() :
{}
{
  < MAIS >
}

void menos() :
{}
{
  < MENOS >
}

void mult() :
{}
{
  < MULT >
}

void divi() :
{}
{
  < DIVI >
}

/* FIM TIPOS OPERADORES MATEMATICOS*/
/* LETRAS E NUMEROS*/
void numero() :
{}
{
  < NUMERO >
}

void letra() :
{}
{
  (
    letraMinuscula()
  | letraMaiuscula()
  )+
}

void letraMinuscula() :
{}
{
  < LETRA_MINUSCULA >
}

void letraMaiuscula() :
{}
{
  < LETRA_MAIUSCULA >
}

void texto() :
{}
{
  delimitaTexto()
  (
    letra()
  | numero()
  )+
  delimitaTexto()
}

/* LETRAS E NUMEROS*/
/* ID */
void id() :
{}
{
  letraMinuscula()
  (
    letra()
  | numero()
  )*
}

/* COMANDOS*/
void chamaFuncao() :
{}
{
  funcao() id() abreParenteses()
  (
   	id()
  | texto()
  | numero()
  )*
  fechaParenteses() pontoVirgula()
}

void declaracaoID() :
{}
{
    tipoID() listaID()
}

void listaID():
{}
{
  (
     id()
  (
    atribuir()
    (
      id()
    | texto()
    | numero()
    )
  )? (virgula())?)*
  pontoVirgula()
}

void repeticao() :
{}
{
  para() abreParenteses()
  (
    increDecrementa() virgula()
  )?
  numero() virgula() id() virgula() numero()
  (
    virgula() increDecrementa()
  )?
  fechaParenteses() abreChave()
  (
    comando()
  )*
  fechaChave()
}

void condicionalSe() :
{}
{
  se() abreParenteses() expressao() fechaParenteses() abreChave()
  (
    comando()
  )*
  fechaChave()
  (
    condicionalSeNao()
  )?
}

void condicionalSeNao() :
{}
{
  seNao() abreChave()
  (
    comando()
  )*
  fechaChave()
}

void expressao() :
{}
{
  (
    id()
  | numero()
  | texto()
  )
  operadorLogico()
  (
    id()
  | numero()
  | texto()
  )
}

void imprimir() :
{}
{
  mostrar() abreParenteses()
  (
    texto()
  | id()
  )
  fechaParenteses() pontoVirgula()
}

void retornoFuncao() :
{}
{
  retorno() abreParenteses()
  (
    id()
  | texto()
  | numero()
  )
  fechaParenteses() pontoVirgula()
}

void iniciaId() :
{}
{
  id() atribuir()
  (
    numero()
  | id()
  | texto()
  )
  pontoVirgula()
}

void criaFuncao() :
{}
{
  funcao() id() abreParenteses()
  (
    tipoID() id()
  )*
  fechaParenteses() abreChave()
  (
    comando()
  )*
  (
    ini() abreParenteses() fechaParenteses() abreChave()
    (
      comando()
    )*
    fechaChave()
  )*
  fechaChave()
}

void comando() :
{}
{
  repeticao()
| declaracaoID()
| condicionalSe()
| chamaFuncao()
| imprimir()
| retornoFuncao()
| iniciaId()
}